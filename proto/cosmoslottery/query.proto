syntax = "proto3";
package orenshva.cosmoslottery.cosmoslottery;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmoslottery/params.proto";
import "cosmoslottery/tx_counter.proto";
import "cosmoslottery/bet_chart.proto";
import "cosmoslottery/fee_counter.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/orenshva/CosmosLottery/x/cosmoslottery/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/orenshva/CosmosLottery/cosmoslottery/params";
  }
  // Queries a TxCounter by index.
	rpc TxCounter(QueryGetTxCounterRequest) returns (QueryGetTxCounterResponse) {
		option (google.api.http).get = "/orenshva/CosmosLottery/cosmoslottery/tx_counter";
	}
// Queries a BetChart by index.
	rpc BetChart(QueryGetBetChartRequest) returns (QueryGetBetChartResponse) {
		option (google.api.http).get = "/orenshva/CosmosLottery/cosmoslottery/bet_chart/{accountName}";
	}

	// Queries a list of BetChart items.
	rpc BetChartAll(QueryAllBetChartRequest) returns (QueryAllBetChartResponse) {
		option (google.api.http).get = "/orenshva/CosmosLottery/cosmoslottery/bet_chart";
	}

// Queries a FeeCounter by index.
	rpc FeeCounter(QueryGetFeeCounterRequest) returns (QueryGetFeeCounterResponse) {
		option (google.api.http).get = "/orenshva/CosmosLottery/cosmoslottery/fee_counter";
	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetTxCounterRequest {}

message QueryGetTxCounterResponse {
	TxCounter TxCounter = 1 [(gogoproto.nullable) = false];
}
message QueryGetBetChartRequest {
	  string accountName = 1;

}

message QueryGetBetChartResponse {
	BetChart betChart = 1 [(gogoproto.nullable) = false];
}

message QueryAllBetChartRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBetChartResponse {
	repeated BetChart betChart = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetFeeCounterRequest {}

message QueryGetFeeCounterResponse {
	FeeCounter FeeCounter = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
